# Docker Compose configuration for Bailey's Kitchen
# Note: 'version' is now obsolete, it's kept for reference only
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: baileys-kitchen-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: baileys_kitchen
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_MULTIPLE_DATABASES: "baileys_kitchen,user_service,product_service"
    ports:
      - "5432:5432"
    volumes:
      - baileys_postgres_data:/var/lib/postgresql/data
      - baileys_postgres_backup:/var/lib/postgresql/backup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d baileys_kitchen"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  api:
    build:
      context: ./apps/api-server
      dockerfile: Dockerfile
    container_name: baileys-kitchen-api
    environment:
      NODE_ENV: development
      PORT: 5001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: baileys_kitchen
      DB_SYNCHRONIZE: "true"
      DB_LOGGING: "true"
      API_PREFIX: /api/v1
      # CORS configuration for all possible client origins:
      # - localhost:3000: For direct browser access during development
      # - web-client:3000: For container-to-container communication by service name
      # - baileys-kitchen-web-client:3000: For container-to-container communication by container name
      # - Additional origins can be added separated by commas for different environments (staging, production)
      CORS_ORIGIN: http://localhost:3000,http://web-client:3000,http://baileys-kitchen-web-client:3000
      JWT_SECRET: your-super-secret-jwt-key-that-should-be-long-and-secure
      JWT_EXPIRES_IN: 1h
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./apps/api-server:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:5001/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  web-client:
    build:
      context: ./apps/web-client
      dockerfile: Dockerfile
    container_name: baileys-kitchen-web-client
    environment:
      NODE_ENV: development
      # Configure API URL for both browser and server contexts
      # Using the service name 'api' instead of 'localhost' is crucial for container-to-container
      # communication within Docker's network. 'localhost' in a container refers to the container itself.
      # 
      # IMPORTANT: This URL is used by the Next.js server for server-side rendering and API calls.
      # Browser clients will still use the browser-facing URL which is handled by the proxy in next.config.js
      NEXT_PUBLIC_API_URL: http://api:5001/api/v1
      NEXTAUTH_SECRET: your-super-secret-jwt-key-that-should-be-long-and-secure
      NEXTAUTH_URL: http://localhost:3000
      # Add debug flags to help troubleshoot API connection issues
      DEBUG: "app:*,api:*"
      # Enable network debugging
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./apps/web-client:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  user-service:
    build:
      context: .
      dockerfile: ./apps/user-service/Dockerfile
    container_name: baileys-kitchen-user-service
    environment:
      NODE_ENV: development
      PORT: 5002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: user_service
      DB_SYNCHRONIZE: "true"
      DB_LOGGING: "true"
      API_PREFIX: /api/v1
      # CORS configuration for the user service to accept requests from all client origins
      CORS_ORIGIN: http://localhost:3000,http://web-client:3000,http://baileys-kitchen-web-client:3000
      JWT_SECRET: your-super-secret-jwt-key-that-should-be-long-and-secure
      JWT_EXPIRES_IN: 1h
      JWT_REFRESH_EXPIRES_IN_DAYS: 30
      # SMTP Configuration for email service
      SMTP_HOST: smtp.ethereal.email
      SMTP_PORT: 587
      SMTP_SECURE: "false"
      SMTP_USER: test@example.com
      SMTP_PASSWORD: testpassword
      SMTP_FROM: noreply@baileyskitchen.com
      CLIENT_URL: http://localhost:3000
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount source code but exclude node_modules
      - ./apps/user-service/src:/app/apps/user-service/src
      - ./apps/user-service/tsconfig.json:/app/apps/user-service/tsconfig.json
      - ./apps/user-service/nest-cli.json:/app/apps/user-service/nest-cli.json
      # Use named volumes for node_modules
      - user-service-node-modules:/app/node_modules
      - user-service-app-node-modules:/app/apps/user-service/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:5002/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
      
  product-service:
    build:
      context: .
      dockerfile: ./apps/product-service/Dockerfile
    container_name: baileys-kitchen-product-service
    environment:
      NODE_ENV: development
      PORT: 5003
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: product_service
      DB_SYNCHRONIZE: "true"
      DB_LOGGING: "true"
      # Fix missing slash in API_PREFIX
      API_PREFIX: /api/v1
      # CORS configuration for the product service to accept requests from all client origins:
      # - localhost:3000: For direct browser access during development
      # - web-client:3000: For container-to-container communication by service name
      # - baileys-kitchen-web-client:3000: For container-to-container communication by container name
      CORS_ORIGIN: http://localhost:3000,http://web-client:3000,http://baileys-kitchen-web-client:3000
    ports:
      - "5003:5003"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount source code but exclude node_modules
      - ./apps/product-service/src:/app/apps/product-service/src
      - ./apps/product-service/tsconfig.json:/app/apps/product-service/tsconfig.json
      - ./apps/product-service/nest-cli.json:/app/apps/product-service/nest-cli.json
      # Use named volumes for node_modules
      - product-service-node-modules:/app/node_modules
      - product-service-app-node-modules:/app/apps/product-service/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:5003/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  blog-service:
    build:
      context: .
      dockerfile: apps/blog-service/Dockerfile
    container_name: baileys-kitchen-blog-service
    environment:
      NODE_ENV: development
      PORT: 5004
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/baileys_kitchen?schema=public
      # CORS configuration for the blog service to accept requests from all client origins
      CORS_ORIGIN: http://localhost:3000,http://web-client:3000,http://baileys-kitchen-web-client:3000
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Mount source code but exclude node_modules
      - ./apps/blog-service/src:/app/apps/blog-service/src
      - ./apps/blog-service/prisma:/app/apps/blog-service/prisma
      - ./apps/blog-service/tsconfig.json:/app/apps/blog-service/tsconfig.json
      # Use named volumes for node_modules
      - blog-service-node-modules:/app/node_modules
      - blog-service-app-node-modules:/app/apps/blog-service/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:5004/api/blog/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  baileys_postgres_data:
    name: baileys_postgres_data
    external: true
  baileys_postgres_backup:
    name: baileys_postgres_backup
  user-service-node-modules:
    name: user-service-node-modules
  user-service-app-node-modules:
    name: user-service-app-node-modules
  product-service-node-modules:
    name: product-service-node-modules
  product-service-app-node-modules:
    name: product-service-app-node-modules
  blog-service-node-modules:
    name: blog-service-node-modules
  blog-service-app-node-modules:
    name: blog-service-app-node-modules

# Networks section commented out to fix deployment issues
networks:
  default:
    name: baileys-kitchen-network
    # Custom driver options removed to resolve "numerical result out of range" error
    driver: bridge
#    driver_opts:
#      com.docker.network.bridge.name: baileys-kitchen-bridge
#      com.docker.network.bridge.enable_icc: "true"
#      com.docker.network.bridge.enable_ip_masquerade: "true"

  baileys-network:
    driver: bridge
